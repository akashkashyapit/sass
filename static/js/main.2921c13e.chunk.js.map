{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Sider","Content","columns","title","dataIndex","key","render","text","tags","map","tag","color","length","toUpperCase","record","style","marginRight","name","data","age","address","App","useState","className","mode","defaultSelectedKeys","Item","padding","margin","background","minHeight","type","dataSource","textAlign","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2921c13e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Icon } from 'antd';\nimport { Table, Tag } from 'antd';\nimport './App.css';\nimport { Layout, Avatar, Menu, Breadcrumb, Button } from 'antd';\nimport Title from 'antd/lib/typography/Title';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport { Cricketer, ODICareer, Batting, Bowling, TestCareer } from './Cricketer';\nimport CareerDetails from './CareerDetails';\n\n\nconst { Header, Footer, Sider, Content } = Layout;\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: text => <a>{text}</a>,\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n  {\n    title: 'Tags',\n    key: 'tags',\n    dataIndex: 'tags',\n    render: tags => (\n      <span>\n        {tags.map(tag => {\n          let color = tag.length > 5 ? 'geekblue' : 'green';\n          if (tag === 'loser') {\n            color = 'volcano';\n          }\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        })}\n      </span>\n    ),\n  },\n  {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => (\n      <span>\n        <a style={{ marginRight: 16 }}>Invite {record.name}</a>\n        <a>Delete</a>\n      </span>\n    ),\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    tags: ['loser'],\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    tags: ['cool', 'teacher'],\n  },\n];\n\nfunction App() {\n  const [selectedPlayer, setSelectedPlayer] = useState('');\n  const [visible, setVisible] = useState(false);\n  const onSelect = name => {\n    setSelectedPlayer(name);\n    setVisible(true);\n  }\n  const ViewProfileButton = ({name}) => {\n    return <Button type='dashed' style={{float:'right'}} onClick={()=>onSelect(name)}> View Full Profile >> </Button>\n  }\n\n  const onClose = () => setVisible(false);\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\">\n      <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu   mode=\"horizontal\" defaultSelectedKeys={['1']}>\n        \n        <Menu.Item key=\"1\">Home</Menu.Item>\n        <Menu.Item key=\"2\">Company</Menu.Item>\n        <Menu.Item key=\"3\">Service</Menu.Item>\n        <Menu.Item key=\"4\">Perspective</Menu.Item>\n        <Menu.Item key=\"5\">About Us</Menu.Item>\n      </Menu>\n    </Header>\n        <Layout>\n          <Sider>\n            <Menu\n              defaultSelectedKeys={['Dashboard']}\n              mode=\"inline\"\n            >\n            <Menu.Item key='Dashboard'>\n                Corporate Profile\n            </Menu.Item>\n            <Menu.Item >\n                User Profile\n            </Menu.Item>\n            <Menu.Item >\n                Employee Polls\n            </Menu.Item>\n            <Menu.Item >\n            Team collaboration\n            </Menu.Item>\n            <Menu.Item >\n                Record Project Activities\n            </Menu.Item>\n            <Menu.Item >\n                Partner Register\n            </Menu.Item>\n            \n            <Menu.Item >\n                Engagement Progress Tracking\n            </Menu.Item>\n            <Menu.Item >\n                Report and metrics\n            </Menu.Item>\n            <Menu.Item >\n                GHG Assesment\n            </Menu.Item>\n              <SubMenu\n                title={\n                  <span>\n                    {/* <Icon type=\"mail\" /> */}\n                    <span>About US</span>\n                  </span>\n                }\n              >              \n                \n                  <Menu.Item key='location1'> Location 1</Menu.Item>\n                  <Menu.Item key='location2'> Location 2</Menu.Item>\n                \n              </SubMenu>\n            </Menu>\n          </Sider>\n\n          <Layout>\n          \n          <Content style={{ padding: '0 50px' }}>\n              <Breadcrumb style={{ margin: '16px 0' }}>\n                <Breadcrumb.Item>Corporate User</Breadcrumb.Item>\n              </Breadcrumb>\n              <div style={{ background: '#fff', padding: 24, minHeight: 500 }}>\n              \n       \n        <Button key=\"1\" type=\"primary\">\n          Create Corporate Profile\n        </Button>\n        \n        <hr/>\n\n        <Table columns={columns} dataSource={data} />\n              </div>\n            </Content>\n                \n            <Footer style={{ textAlign: 'center' }}>@copyright 2020</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}